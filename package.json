{
  "name": "api",
  "version": "0.0.1",
  "description": "TypeORM TypeGraphQL REST boilerplate project",
  "type": "commonjs",
  "scripts": {
    "typeorm": "node -r ts-node/register ./node_modules/typeorm/cli.js -f ./src/orm/ormconfig.ts",
    "typeorm:cli": "ts-node ./node_modules/typeorm/cli.js -f ./src/orm/ormconfig.ts",
    "typeorm:dist": "node -r ts-node/register ./node_modules/typeorm/cli.js -f ./dist/orm/ormconfig.js",
    "-- Dev ------": "synchronize = true  --  Migration-files are created here",
    "start": "nodemon --exec ts-node src/index.ts",
    "typeorm:sync": "npm run typeorm schema:sync",
    "migration:create": "set NODE_ENV=test&& npm run typeorm migration:create -- -n",
    "migration:generate": "set NODE_ENV=test&& npm run typeorm migration:generate -- -n",
    "-- Test -----": "synchronize = false  --  migration to test (this part is tested too)",
    "test": "npm run test:resetDB && jest",
    "coverage": "npm run test:resetDB && jest --coverage",
    "resetdb": "ts-node ./src/test-utils/resetTestDB.ts",
    "typeorm:drop": "set NODE_ENV=test&& npm run typeorm schema:drop",
    "test:resetDB": "set NODE_ENV=test&& npm run typeorm schema:drop && npm run typeorm migration:run",
    "test:migration:run": "set NODE_ENV=test&& npm run typeorm migration:run",
    "test:migration:revert": "set NODE_ENV=test&& npm run typeorm migration:revert",
    "-- Staging --": "synchronize = false  --  /dist code, staging DB (scrambled prod copy)",
    "dist:clean": "rm -rf ./dist",
    "dist:build": "tsc -b ./tsconfig.prod.json --force --verbose",
    "dist:test": "tsc -b --verbose",
    "staginglocal:drop": "set NODE_ENV=staginglocal&& typeorm:dist schema:drop",
    "staginglocal:resetDB": "set NODE_ENV=staginglocal&& npm run typeorm:dist schema:drop && npm run typeorm:dist migration:run",
    "staginglocal:migration:run": "set NODE_ENV=staginglocal&& npm run typeorm:dist migration:run",
    "staginglocal:migration:revert": "set NODE_ENV=staginglocal&& npm run typeorm:dist migration:revert",
    "staginglocal:jest": "set NODE_ENV=staginglocal&& jest",
    "staginglocal:test": "set NODE_ENV=staginglocal&& npm run dist:clean && npm run dist:test && npm run staginglocal:resetDB && npm run staginglocal:jest",
    "staginglocal:start": "set NODE_ENV=staginglocal&& node --trace-warnings ./dist/index.js",
    "staging:start": "set NODE_ENV=staging&& node --trace-warnings ./dist/index.js",
    "staging:test": "set NODE_ENV=staging&& npm run dist:clean && npm run dist:test && jest",
    "staging:build": "set NODE_ENV=staging&& npm run dist:clean && npm run dist:build && jest",
    "-- Prod -----": "synchronize = false  --  /dist code, prod DB",
    "prod:start": "set NODE_ENV=prod&& node --trace-warnings ./dist/index.js"
  },
  "dependencies": {
    "apollo-server-express": "^3.5.0",
    "argon2": "^0.28.3",
    "body-parser": "^1.19.1",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "dotenv": "^10.0.0",
    "express": "^4.17.1",
    "graphql": "^15.8.0",
    "jsonwebtoken": "^8.5.1",
    "mysql": "^2.14.1",
    "mysql2": "^2.3.3",
    "nodemailer": "^6.7.2",
    "reflect-metadata": "^0.1.13",
    "type-graphql": "^1.1.1",
    "uuid": "^8.3.2"
  },
  "devDependencies": {
    "@types/body-parser": "^1.19.2",
    "@types/cookie-parser": "^1.4.2",
    "@types/cors": "^2.8.12",
    "@types/express": "^4.17.13",
    "@types/faker": "^5.5.9",
    "@types/jest": "^27.0.3",
    "@types/jsonwebtoken": "^8.5.6",
    "@types/node": "^8.10.66",
    "@types/nodemailer": "^6.4.4",
    "@types/supertest": "^2.0.11",
    "@types/uuid": "^8.3.3",
    "apollo-server-core": "^3.5.0",
    "faker": "^5.5.3",
    "jest": "^27.4.5",
    "nodemon": "^2.0.15",
    "supertest": "^6.1.6",
    "ts-jest": "^27.1.2",
    "ts-node": "3.3.0",
    "typeorm": "^0.2.41",
    "typescript": "^3.9.10"
  }
}
